nohup: ignoring input
Namespace(H=1080, O=False, W=1920, bound=2, cuda_device=0, cuda_ray=False, cuda_ray_density_time_slice_interval=1, downscale=2, dt_gamma=0.0078125, epoch=200, error_type='isg', eval_interval=100, ff=False, fovy=50, fp16=False, geo_feat_dim=128, gui=False, hidden_dim=256, max_ray_batch=4096, max_spp=64, mode='colmap', model='CombineDyNeRFNetwork', model_static=False, num_rays=4096, num_steps=512, out_video_idx=12, path='./data/coffee_martini/', preload=True, radius=5, rand_pose_interval=0, scale=0.1, seed=0, tcnn=False, test=True, upsample_steps=0, video_frame_num=150, video_frame_start=0, workspace='trial_dynerf_5s')
CombineDyNeRFNetwork(
  (static_model): StaticNerf(
    (encoder): FreqEncoder()
    (sigma_net): ModuleList(
      (0): Linear(in_features=75, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=256, bias=False)
      (3): Linear(in_features=331, out_features=256, bias=False)
      (4): Linear(in_features=256, out_features=256, bias=False)
      (5): Linear(in_features=256, out_features=257, bias=False)
    )
    (encoder_dir): FreqEncoder()
    (color_net): ModuleList(
      (0): Linear(in_features=307, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=3, bias=False)
    )
  )
  (dynamic_model): DynamicNerf(
    (encoder): FreqEncoder()
    (encoder_time): FreqEncoder()
    (sigma_net): ModuleList(
      (0): Linear(in_features=100, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=256, bias=False)
      (3): Linear(in_features=356, out_features=256, bias=False)
      (4): Linear(in_features=256, out_features=256, bias=False)
      (5): Linear(in_features=256, out_features=257, bias=False)
    )
    (encoder_dir): FreqEncoder()
    (color_net): ModuleList(
      (0): Linear(in_features=307, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=3, bias=False)
    )
  )
)
[INFO] Trainer: ngp | 2022-06-30_08-11-08 | cuda | fp32 | trial_dynerf_5s
[INFO] #parameters: 1035264
[INFO] Loading latest checkpoint ...
[INFO] Latest checkpoint is trial_dynerf_5s/checkpoints/ngp_ep0200.pth.tar
[INFO] loaded model.
[INFO] loaded optimizer.
[WARN] Failed to load scheduler, use default.
[INFO] loaded scaler.
==> Start Test, save results to trial_dynerf_5s/results
  0% 0/150 [00:00<?, ?it/s]  1% 1/150 [00:53<2:13:04, 53.59s/it]  1% 2/150 [01:46<2:11:24, 53.27s/it]  2% 3/150 [02:39<2:10:15, 53.16s/it]  3% 4/150 [03:32<2:09:13, 53.11s/it]  3% 5/150 [04:25<2:08:17, 53.09s/it]  4% 6/150 [05:18<2:07:23, 53.08s/it]  5% 7/150 [06:11<2:06:29, 53.07s/it]  5% 8/150 [07:04<2:05:38, 53.09s/it]  6% 9/150 [07:58<2:04:46, 53.10s/it]  7% 10/150 [08:51<2:03:53, 53.10s/it]  7% 11/150 [09:44<2:03:00, 53.10s/it]  8% 12/150 [10:37<2:02:07, 53.10s/it]  9% 13/150 [11:30<2:01:16, 53.11s/it]  9% 14/150 [12:23<2:00:22, 53.11s/it] 10% 15/150 [13:16<1:59:31, 53.12s/it] 11% 16/150 [14:09<1:58:38, 53.12s/it] 11% 17/150 [15:03<1:57:45, 53.12s/it] 12% 18/150 [15:56<1:56:51, 53.12s/it] 13% 19/150 [16:49<1:55:56, 53.10s/it] 13% 20/150 [17:42<1:55:04, 53.11s/it] 14% 21/150 [18:35<1:54:11, 53.11s/it] 15% 22/150 [19:28<1:53:19, 53.12s/it] 15% 23/150 [20:21<1:52:25, 53.12s/it] 16% 24/150 [21:14<1:51:32, 53.12s/it] 17% 25/150 [22:07<1:50:39, 53.11s/it] 17% 26/150 [23:01<1:49:45, 53.11s/it] 18% 27/150 [23:54<1:48:52, 53.11s/it] 19% 28/150 [24:47<1:48:00, 53.12s/it] 19% 29/150 [25:40<1:47:05, 53.11s/it] 20% 30/150 [26:33<1:46:12, 53.11s/it] 21% 31/150 [27:26<1:45:20, 53.11s/it] 21% 32/150 [28:19<1:44:27, 53.12s/it] 22% 33/150 [29:12<1:43:34, 53.12s/it] 23% 34/150 [30:05<1:42:41, 53.12s/it] 23% 35/150 [30:59<1:41:47, 53.11s/it] 24% 36/150 [31:52<1:40:54, 53.11s/it] 25% 37/150 [32:45<1:40:02, 53.12s/it] 25% 38/150 [33:38<1:39:08, 53.11s/it] 26% 39/150 [34:31<1:38:14, 53.11s/it] 27% 40/150 [35:24<1:37:22, 53.11s/it] 27% 41/150 [36:17<1:36:29, 53.11s/it] 28% 42/150 [37:10<1:35:35, 53.11s/it] 29% 43/150 [38:03<1:34:43, 53.11s/it] 29% 44/150 [38:57<1:33:50, 53.12s/it] 30% 45/150 [39:50<1:32:57, 53.12s/it] 31% 46/150 [40:43<1:32:04, 53.12s/it] 31% 47/150 [41:36<1:31:10, 53.11s/it] 32% 48/150 [42:29<1:30:16, 53.11s/it] 33% 49/150 [43:22<1:29:22, 53.10s/it] 33% 50/150 [44:15<1:28:29, 53.10s/it] 34% 51/150 [45:08<1:27:36, 53.09s/it] 35% 52/150 [46:01<1:26:43, 53.10s/it] 35% 53/150 [46:55<1:25:51, 53.11s/it] 36% 54/150 [47:48<1:24:59, 53.12s/it] 37% 55/150 [48:41<1:24:05, 53.12s/it] 37% 56/150 [49:34<1:23:13, 53.12s/it] 38% 57/150 [50:27<1:22:19, 53.12s/it] 39% 58/150 [51:20<1:21:26, 53.12s/it] 39% 59/150 [52:13<1:20:34, 53.13s/it] 40% 60/150 [53:06<1:19:41, 53.13s/it] 41% 61/150 [54:00<1:18:48, 53.12s/it] 41% 62/150 [54:53<1:17:54, 53.12s/it] 42% 63/150 [55:46<1:17:00, 53.11s/it] 43% 64/150 [56:39<1:16:07, 53.11s/it] 43% 65/150 [57:32<1:15:14, 53.11s/it] 44% 66/150 [58:25<1:14:21, 53.12s/it] 45% 67/150 [59:18<1:13:29, 53.12s/it] 45% 68/150 [1:00:11<1:12:36, 53.13s/it] 46% 69/150 [1:01:04<1:11:43, 53.13s/it] 47% 70/150 [1:01:58<1:10:49, 53.12s/it] 47% 71/150 [1:02:51<1:09:56, 53.12s/it] 48% 72/150 [1:03:44<1:09:03, 53.12s/it] 49% 73/150 [1:04:37<1:08:09, 53.11s/it] 49% 74/150 [1:05:30<1:07:16, 53.11s/it] 50% 75/150 [1:06:23<1:06:23, 53.11s/it] 51% 76/150 [1:07:16<1:05:30, 53.11s/it] 51% 77/150 [1:08:09<1:04:37, 53.11s/it] 52% 78/150 [1:09:02<1:03:44, 53.12s/it] 53% 79/150 [1:09:56<1:02:51, 53.11s/it] 53% 80/150 [1:10:49<1:01:58, 53.13s/it] 54% 81/150 [1:11:42<1:01:05, 53.12s/it] 55% 82/150 [1:12:35<1:00:12, 53.12s/it] 55% 83/150 [1:13:28<59:18, 53.12s/it]   56% 84/150 [1:14:21<58:25, 53.12s/it] 57% 85/150 [1:15:14<57:33, 53.13s/it] 57% 86/150 [1:16:07<56:39, 53.12s/it] 58% 87/150 [1:17:01<55:46, 53.12s/it] 59% 88/150 [1:17:54<54:53, 53.12s/it] 59% 89/150 [1:18:47<53:59, 53.11s/it] 60% 90/150 [1:19:40<53:06, 53.11s/it] 61% 91/150 [1:20:33<52:13, 53.11s/it] 61% 92/150 [1:21:26<51:20, 53.11s/it] 62% 93/150 [1:22:19<50:27, 53.11s/it] 63% 94/150 [1:23:12<49:34, 53.12s/it] 63% 95/150 [1:24:05<48:41, 53.12s/it] 64% 96/150 [1:24:59<47:48, 53.12s/it] 65% 97/150 [1:25:52<46:55, 53.11s/it] 65% 98/150 [1:26:45<46:02, 53.12s/it] 66% 99/150 [1:27:38<45:08, 53.11s/it] 67% 100/150 [1:28:31<44:15, 53.12s/it] 67% 101/150 [1:29:24<43:22, 53.11s/it] 68% 102/150 [1:30:17<42:29, 53.12s/it] 69% 103/150 [1:31:10<41:36, 53.11s/it] 69% 104/150 [1:32:03<40:43, 53.11s/it] 70% 105/150 [1:32:57<39:50, 53.12s/it] 71% 106/150 [1:33:50<38:56, 53.11s/it] 71% 107/150 [1:34:43<38:03, 53.11s/it] 72% 108/150 [1:35:36<37:10, 53.11s/it] 73% 109/150 [1:36:29<36:17, 53.10s/it] 73% 110/150 [1:37:22<35:23, 53.10s/it] 74% 111/150 [1:38:15<34:30, 53.10s/it] 75% 112/150 [1:39:08<33:37, 53.10s/it] 75% 113/150 [1:40:01<32:44, 53.11s/it] 76% 114/150 [1:40:55<31:51, 53.10s/it] 77% 115/150 [1:41:48<30:58, 53.10s/it] 77% 116/150 [1:42:41<30:05, 53.11s/it] 78% 117/150 [1:43:34<29:12, 53.11s/it] 79% 118/150 [1:44:27<28:19, 53.11s/it] 79% 119/150 [1:45:20<27:26, 53.11s/it] 80% 120/150 [1:46:13<26:33, 53.12s/it] 81% 121/150 [1:47:06<25:40, 53.12s/it] 81% 122/150 [1:47:59<24:47, 53.11s/it] 82% 123/150 [1:48:52<23:53, 53.10s/it] 83% 124/150 [1:49:46<23:00, 53.10s/it] 83% 125/150 [1:50:39<22:07, 53.10s/it] 84% 126/150 [1:51:32<21:14, 53.10s/it] 85% 127/150 [1:52:25<20:21, 53.11s/it] 85% 128/150 [1:53:18<19:28, 53.11s/it] 86% 129/150 [1:54:11<18:35, 53.10s/it] 87% 130/150 [1:55:04<17:41, 53.10s/it] 87% 131/150 [1:55:57<16:48, 53.10s/it] 88% 132/150 [1:56:50<15:55, 53.10s/it] 89% 133/150 [1:57:44<15:02, 53.10s/it] 89% 134/150 [1:58:37<14:09, 53.10s/it] 90% 135/150 [1:59:31<13:22, 53.51s/it] 91% 136/150 [2:00:24<12:28, 53.44s/it] 91% 137/150 [2:01:50<13:42, 63.25s/it] 92% 138/150 [2:02:45<12:06, 60.57s/it] 93% 139/150 [2:03:38<10:41, 58.34s/it] 93% 140/150 [2:04:31<09:27, 56.79s/it] 94% 141/150 [2:05:24<08:21, 55.68s/it] 95% 142/150 [2:06:17<07:19, 54.91s/it] 95% 143/150 [2:07:10<06:20, 54.38s/it] 96% 144/150 [2:08:04<05:23, 54.00s/it] 97% 145/150 [2:08:57<04:28, 53.73s/it] 97% 146/150 [2:09:50<03:34, 53.55s/it] 98% 147/150 [2:10:43<02:40, 53.41s/it] 99% 148/150 [2:11:37<01:47, 53.70s/it] 99% 149/150 [2:12:31<00:53, 53.62s/it]100% 150/150 [2:13:25<00:00, 53.84s/it]IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (1352, 1014) to (1360, 1024) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).
[swscaler @ 0x6dbed80] Warning: data is not aligned! This can lead to a speed loss
IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (1352, 1014) to (1360, 1024) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).
[swscaler @ 0x6c1f8c0] Warning: data is not aligned! This can lead to a speed loss
120.42696747507284 (1014, 1352, 3)
120.51597749845361 (1014, 1352, 3)
120.54953043972161 (1014, 1352, 3)
120.55758192017865 (1014, 1352, 3)
120.53186916696816 (1014, 1352, 3)
120.53083385852503 (1014, 1352, 3)
120.52509759812331 (1014, 1352, 3)
120.50520426066626 (1014, 1352, 3)
120.49099879789456 (1014, 1352, 3)
120.48553267081374 (1014, 1352, 3)
120.48705840131647 (1014, 1352, 3)
120.46009175293426 (1014, 1352, 3)
120.45392099366269 (1014, 1352, 3)
120.44802474430945 (1014, 1352, 3)
120.45576961980012 (1014, 1352, 3)
120.44757395477127 (1014, 1352, 3)
120.45635122097343 (1014, 1352, 3)
120.4529194822777 (1014, 1352, 3)
120.4401823679532 (1014, 1352, 3)
120.41907598356734 (1014, 1352, 3)
120.41701630817471 (1014, 1352, 3)
120.41956105645227 (1014, 1352, 3)
120.40866551708041 (1014, 1352, 3)
120.4110770222798 (1014, 1352, 3)
120.40741356706309 (1014, 1352, 3)
120.40884082412303 (1014, 1352, 3)
120.39240475551354 (1014, 1352, 3)
120.40573927539107 (1014, 1352, 3)
120.41108796377344 (1014, 1352, 3)
120.40968477799953 (1014, 1352, 3)
120.39675801111851 (1014, 1352, 3)
120.39503557687445 (1014, 1352, 3)
120.39888090402997 (1014, 1352, 3)
120.38358518220261 (1014, 1352, 3)
120.38250975494944 (1014, 1352, 3)
120.37841009885275 (1014, 1352, 3)
120.38582454123532 (1014, 1352, 3)
120.36665407179176 (1014, 1352, 3)
120.37609536508603 (1014, 1352, 3)
120.38047633914157 (1014, 1352, 3)
120.38106012861361 (1014, 1352, 3)
120.36593606666433 (1014, 1352, 3)
120.36847035973686 (1014, 1352, 3)
120.38191259254071 (1014, 1352, 3)
120.37770133320885 (1014, 1352, 3)
120.38636237643406 (1014, 1352, 3)
120.38791169193422 (1014, 1352, 3)
120.39557851810355 (1014, 1352, 3)
120.37071069134679 (1014, 1352, 3)
120.37700326591428 (1014, 1352, 3)
120.38204437675307 (1014, 1352, 3)
120.39412402888165 (1014, 1352, 3)
120.38211270030227 (1014, 1352, 3)
120.38780908503826 (1014, 1352, 3)
120.39205949060296 (1014, 1352, 3)
120.38845633517344 (1014, 1352, 3)
120.39130404125284 (1014, 1352, 3)
120.39757230139001 (1014, 1352, 3)
120.40835453551658 (1014, 1352, 3)
120.39190679598053 (1014, 1352, 3)
120.39833796280087 (1014, 1352, 3)
120.39471049294103 (1014, 1352, 3)
120.40181103602815 (1014, 1352, 3)
120.38393530999926 (1014, 1352, 3)
120.38696561745037 (1014, 1352, 3)
120.38001752584138 (1014, 1352, 3)
120.37391946671646 (1014, 1352, 3)
120.3733038253407 (1014, 1352, 3)
120.37992902131501 (1014, 1352, 3)
120.39235977381745 (1014, 1352, 3)
120.37471503487662 (1014, 1352, 3)
120.37908701259293 (1014, 1352, 3)
120.37589525732447 (1014, 1352, 3)
120.39083647475773 (1014, 1352, 3)
120.38266852817945 (1014, 1352, 3)
120.39654939330633 (1014, 1352, 3)
120.39215188543818 (1014, 1352, 3)
120.38780495158511 (1014, 1352, 3)
120.37959396846516 (1014, 1352, 3)
120.38642243307696 (1014, 1352, 3)
120.3986944123494 (1014, 1352, 3)
120.38788178518493 (1014, 1352, 3)
120.39095367031189 (1014, 1352, 3)
120.3861914459889 (1014, 1352, 3)
120.39228780310368 (1014, 1352, 3)
120.37636987500437 (1014, 1352, 3)
120.38294522639653 (1014, 1352, 3)
120.37856741321694 (1014, 1352, 3)
120.3721741769079 (1014, 1352, 3)
120.36192856225856 (1014, 1352, 3)
120.36805993215302 (1014, 1352, 3)
120.37663028255314 (1014, 1352, 3)
120.36458248232827 (1014, 1352, 3)
120.36088887721796 (1014, 1352, 3)
120.35677147158712 (1014, 1352, 3)
120.36374314819354 (1014, 1352, 3)
120.35661512980016 (1014, 1352, 3)
120.37445268217344 (1014, 1352, 3)
120.38265175122253 (1014, 1352, 3)
120.38124394570686 (1014, 1352, 3)
120.37342320919358 (1014, 1352, 3)
120.38228581904617 (1014, 1352, 3)
120.39698875506227 (1014, 1352, 3)
120.39767928488342 (1014, 1352, 3)
120.41241650424627 (1014, 1352, 3)
120.41978815323148 (1014, 1352, 3)
120.42966807884878 (1014, 1352, 3)
120.41293877820961 (1014, 1352, 3)
120.42230445362557 (1014, 1352, 3)
120.42611014825967 (1014, 1352, 3)
120.42887372641015 (1014, 1352, 3)
120.42556015584577 (1014, 1352, 3)
120.43635722177484 (1014, 1352, 3)
120.44669985100117 (1014, 1352, 3)
120.43870040342503 (1014, 1352, 3)
120.44625270862754 (1014, 1352, 3)
120.44379038626876 (1014, 1352, 3)
120.45098794393287 (1014, 1352, 3)
120.43840887340546 (1014, 1352, 3)
120.45142973713183 (1014, 1352, 3)
120.4540722294193 (1014, 1352, 3)
120.45068255468802 (1014, 1352, 3)
120.43646226011383 (1014, 1352, 3)
120.43369892510766 (1014, 1352, 3)
120.44581504888173 (1014, 1352, 3)
120.44541191562698 (1014, 1352, 3)
120.4636219650728 (1014, 1352, 3)
120.46899812876144 (1014, 1352, 3)
120.48115048103669 (1014, 1352, 3)
120.4662656730818 (1014, 1352, 3)
120.47390721224357 (1014, 1352, 3)
120.47654873195383 (1014, 1352, 3)
120.48182812420978 (1014, 1352, 3)
120.47343843002696 (1014, 1352, 3)
120.47364899299356 (1014, 1352, 3)
120.47266182712245 (1014, 1352, 3)
120.45982891394247 (1014, 1352, 3)
120.46274275527234 (1014, 1352, 3)
120.45612558306004 (1014, 1352, 3)
120.46165614338122 (1014, 1352, 3)
120.44302934459967 (1014, 1352, 3)
120.45542557061106 (1014, 1352, 3)
120.45073361499169 (1014, 1352, 3)
120.45141077187618 (1014, 1352, 3)
120.43512982933215 (1014, 1352, 3)
120.43469411474076 (1014, 1352, 3)
120.4263304369984 (1014, 1352, 3)
120.41482120140518 (1014, 1352, 3)
120.4177537648464 (1014, 1352, 3)
120.41193678053601 (1014, 1352, 3)
==> Finished Test.
100% 150/150 [2:13:30<00:00, 53.40s/it]==> Saving mesh to trial_dynerf_5s/meshes/ngp_200.ply

Traceback (most recent call last):
  File "main_dynerf.py", line 117, in <module>
    trainer.save_mesh(resolution=256, threshold=10)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 446, in save_mesh
    vertices, triangles = extract_geometry(self.model.aabb_infer[:3], self.model.aabb_infer[3:], resolution=resolution, threshold=threshold, query_func=query_func)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 149, in extract_geometry
    u = extract_fields(bound_min, bound_max, resolution, query_func)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 142, in extract_fields
    val = query_func(pts, ts).reshape(len(xs), len(ys), len(zs)).detach().cpu().numpy() # [S, 1] --> [x, y, z]
TypeError: query_func() takes 1 positional argument but 2 were given
