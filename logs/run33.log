nohup: ignoring input
Namespace(H=1080, O=False, W=1920, bound=2, cuda_device=0, cuda_ray=False, cuda_ray_density_time_slice_interval=1, downscale=2, dt_gamma=0.0078125, epoch=200, error_type='isg', eval_interval=100, ff=False, fovy=50, fp16=False, geo_feat_dim=128, gui=False, hidden_dim=256, max_ray_batch=4096, max_spp=64, mode='colmap', model='CombineDyNeRFNetwork', model_static=False, num_rays=4096, num_steps=512, out_video_idx=33, path='./data/coffee_martini/', preload=True, radius=5, rand_pose_interval=0, scale=0.1, seed=0, tcnn=False, test=True, upsample_steps=0, video_frame_num=150, video_frame_start=0, workspace='trial_dynerf_5s')
CombineDyNeRFNetwork(
  (static_model): StaticNerf(
    (encoder): FreqEncoder()
    (sigma_net): ModuleList(
      (0): Linear(in_features=75, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=256, bias=False)
      (3): Linear(in_features=331, out_features=256, bias=False)
      (4): Linear(in_features=256, out_features=256, bias=False)
      (5): Linear(in_features=256, out_features=257, bias=False)
    )
    (encoder_dir): FreqEncoder()
    (color_net): ModuleList(
      (0): Linear(in_features=307, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=3, bias=False)
    )
  )
  (dynamic_model): DynamicNerf(
    (encoder): FreqEncoder()
    (encoder_time): FreqEncoder()
    (sigma_net): ModuleList(
      (0): Linear(in_features=100, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=256, bias=False)
      (3): Linear(in_features=356, out_features=256, bias=False)
      (4): Linear(in_features=256, out_features=256, bias=False)
      (5): Linear(in_features=256, out_features=257, bias=False)
    )
    (encoder_dir): FreqEncoder()
    (color_net): ModuleList(
      (0): Linear(in_features=307, out_features=256, bias=False)
      (1): Linear(in_features=256, out_features=256, bias=False)
      (2): Linear(in_features=256, out_features=3, bias=False)
    )
  )
)
[INFO] Trainer: ngp | 2022-07-01_12-53-11 | cuda | fp32 | trial_dynerf_5s
[INFO] #parameters: 1035264
[INFO] Loading latest checkpoint ...
[INFO] Latest checkpoint is trial_dynerf_5s/checkpoints/ngp_ep0200.pth.tar
[INFO] loaded model.
[INFO] loaded optimizer.
[WARN] Failed to load scheduler, use default.
[INFO] loaded scaler.
==> Start Test, save results to trial_dynerf_5s/results
  0% 0/150 [00:00<?, ?it/s]  1% 1/150 [00:53<2:13:55, 53.93s/it]  1% 2/150 [01:47<2:12:14, 53.61s/it]  2% 3/150 [02:40<2:11:08, 53.53s/it]  3% 4/150 [03:34<2:10:11, 53.50s/it]  3% 5/150 [04:27<2:09:15, 53.49s/it]  4% 6/150 [05:21<2:08:21, 53.49s/it]  5% 7/150 [06:14<2:07:27, 53.48s/it]  5% 8/150 [07:08<2:06:34, 53.48s/it]  6% 9/150 [08:01<2:05:41, 53.49s/it]  7% 10/150 [08:55<2:04:48, 53.49s/it]  7% 11/150 [09:48<2:03:55, 53.49s/it]  8% 12/150 [10:42<2:03:02, 53.50s/it]  9% 13/150 [11:35<2:02:08, 53.50s/it]  9% 14/150 [12:29<2:01:15, 53.50s/it] 10% 15/150 [13:22<2:00:23, 53.50s/it] 11% 16/150 [14:16<1:59:29, 53.51s/it] 11% 17/150 [15:09<1:58:37, 53.52s/it] 12% 18/150 [16:03<1:57:44, 53.52s/it] 13% 19/150 [16:56<1:56:51, 53.52s/it] 13% 20/150 [17:50<1:55:57, 53.52s/it] 14% 21/150 [18:43<1:55:04, 53.52s/it] 15% 22/150 [19:37<1:54:10, 53.52s/it] 15% 23/150 [20:30<1:53:17, 53.53s/it] 16% 24/150 [21:24<1:52:25, 53.54s/it] 17% 25/150 [22:17<1:51:32, 53.54s/it] 17% 26/150 [23:11<1:50:38, 53.54s/it] 18% 27/150 [24:04<1:49:44, 53.53s/it] 19% 28/150 [24:58<1:48:51, 53.53s/it] 19% 29/150 [25:52<1:47:57, 53.54s/it] 20% 30/150 [26:45<1:47:04, 53.54s/it] 21% 31/150 [27:39<1:46:11, 53.54s/it] 21% 32/150 [28:32<1:45:18, 53.54s/it] 22% 33/150 [29:26<1:44:24, 53.54s/it] 23% 34/150 [30:19<1:43:32, 53.56s/it] 23% 35/150 [31:13<1:42:39, 53.56s/it] 24% 36/150 [32:06<1:41:45, 53.56s/it] 25% 37/150 [33:00<1:40:52, 53.56s/it] 25% 38/150 [33:54<1:39:57, 53.55s/it] 26% 39/150 [34:47<1:39:04, 53.55s/it] 27% 40/150 [35:41<1:38:09, 53.54s/it] 27% 41/150 [36:34<1:37:16, 53.55s/it] 28% 42/150 [37:28<1:36:23, 53.55s/it] 29% 43/150 [38:21<1:35:29, 53.55s/it] 29% 44/150 [39:15<1:34:36, 53.55s/it] 30% 45/150 [40:08<1:33:43, 53.55s/it] 31% 46/150 [41:02<1:32:49, 53.55s/it] 31% 47/150 [41:56<1:31:55, 53.55s/it] 32% 48/150 [42:49<1:31:02, 53.56s/it] 33% 49/150 [43:43<1:30:08, 53.55s/it] 33% 50/150 [44:36<1:29:15, 53.55s/it] 34% 51/150 [45:30<1:28:21, 53.55s/it] 35% 52/150 [46:23<1:27:27, 53.55s/it] 35% 53/150 [47:17<1:26:34, 53.55s/it] 36% 54/150 [48:10<1:25:41, 53.56s/it] 37% 55/150 [49:04<1:24:47, 53.55s/it] 37% 56/150 [49:57<1:23:54, 53.55s/it] 38% 57/150 [50:51<1:23:00, 53.55s/it] 39% 58/150 [51:45<1:22:06, 53.55s/it] 39% 59/150 [52:38<1:21:13, 53.55s/it] 40% 60/150 [53:32<1:20:19, 53.55s/it] 41% 61/150 [54:25<1:19:26, 53.55s/it] 41% 62/150 [55:19<1:18:32, 53.55s/it] 42% 63/150 [56:12<1:17:39, 53.56s/it] 43% 64/150 [57:06<1:16:45, 53.55s/it] 43% 65/150 [57:59<1:15:51, 53.55s/it] 44% 66/150 [58:53<1:14:58, 53.56s/it] 45% 67/150 [59:47<1:14:05, 53.56s/it] 45% 68/150 [1:00:40<1:13:11, 53.56s/it] 46% 69/150 [1:01:34<1:12:18, 53.56s/it] 47% 70/150 [1:02:27<1:11:24, 53.56s/it] 47% 71/150 [1:03:21<1:10:31, 53.56s/it] 48% 72/150 [1:04:14<1:09:38, 53.56s/it] 49% 73/150 [1:05:08<1:08:44, 53.56s/it] 49% 74/150 [1:06:02<1:07:50, 53.56s/it] 50% 75/150 [1:06:55<1:06:57, 53.56s/it] 51% 76/150 [1:07:49<1:06:03, 53.56s/it] 51% 77/150 [1:08:42<1:05:09, 53.56s/it] 52% 78/150 [1:09:36<1:04:16, 53.56s/it] 53% 79/150 [1:10:29<1:03:22, 53.56s/it] 53% 80/150 [1:11:23<1:02:28, 53.56s/it] 54% 81/150 [1:12:16<1:01:35, 53.55s/it] 55% 82/150 [1:13:10<1:00:41, 53.56s/it] 55% 83/150 [1:14:04<59:48, 53.56s/it]   56% 84/150 [1:14:57<58:55, 53.56s/it] 57% 85/150 [1:15:51<58:01, 53.56s/it] 57% 86/150 [1:16:44<57:08, 53.57s/it] 58% 87/150 [1:17:38<56:14, 53.56s/it] 59% 88/150 [1:18:31<55:21, 53.57s/it] 59% 89/150 [1:19:25<54:27, 53.57s/it] 60% 90/150 [1:20:18<53:34, 53.57s/it] 61% 91/150 [1:21:12<52:40, 53.57s/it] 61% 92/150 [1:22:06<51:46, 53.57s/it] 62% 93/150 [1:22:59<50:53, 53.56s/it] 63% 94/150 [1:23:53<49:59, 53.57s/it] 63% 95/150 [1:24:46<49:06, 53.57s/it] 64% 96/150 [1:25:40<48:12, 53.57s/it] 65% 97/150 [1:26:33<47:19, 53.57s/it] 65% 98/150 [1:27:27<46:25, 53.57s/it] 66% 99/150 [1:28:21<45:31, 53.57s/it] 67% 100/150 [1:29:14<44:37, 53.56s/it] 67% 101/150 [1:30:08<43:44, 53.56s/it] 68% 102/150 [1:31:01<42:51, 53.56s/it] 69% 103/150 [1:31:55<41:57, 53.57s/it] 69% 104/150 [1:32:48<41:04, 53.57s/it] 70% 105/150 [1:33:42<40:10, 53.56s/it] 71% 106/150 [1:34:36<39:16, 53.56s/it] 71% 107/150 [1:35:29<38:22, 53.56s/it] 72% 108/150 [1:36:23<37:29, 53.56s/it] 73% 109/150 [1:37:16<36:36, 53.56s/it] 73% 110/150 [1:38:10<35:42, 53.56s/it] 74% 111/150 [1:39:03<34:48, 53.56s/it] 75% 112/150 [1:39:57<33:55, 53.56s/it] 75% 113/150 [1:40:50<33:01, 53.56s/it] 76% 114/150 [1:41:44<32:08, 53.56s/it] 77% 115/150 [1:42:38<31:14, 53.56s/it] 77% 116/150 [1:43:31<30:21, 53.56s/it] 78% 117/150 [1:44:25<29:27, 53.55s/it] 79% 118/150 [1:45:18<28:33, 53.56s/it] 79% 119/150 [1:46:12<27:40, 53.56s/it] 80% 120/150 [1:47:05<26:46, 53.56s/it] 81% 121/150 [1:47:59<25:53, 53.56s/it] 81% 122/150 [1:48:52<24:59, 53.56s/it] 82% 123/150 [1:49:46<24:06, 53.56s/it] 83% 124/150 [1:50:40<23:12, 53.56s/it] 83% 125/150 [1:51:33<22:18, 53.56s/it] 84% 126/150 [1:52:27<21:25, 53.56s/it] 85% 127/150 [1:53:20<20:31, 53.56s/it] 85% 128/150 [1:54:14<19:38, 53.56s/it] 86% 129/150 [1:55:07<18:44, 53.56s/it] 87% 130/150 [1:56:01<17:51, 53.56s/it] 87% 131/150 [1:56:55<16:57, 53.56s/it] 88% 132/150 [1:57:48<16:04, 53.56s/it] 89% 133/150 [1:58:42<15:10, 53.56s/it] 89% 134/150 [1:59:35<14:16, 53.56s/it] 90% 135/150 [2:00:29<13:23, 53.55s/it] 91% 136/150 [2:01:22<12:29, 53.56s/it] 91% 137/150 [2:02:16<11:36, 53.56s/it] 92% 138/150 [2:03:09<10:42, 53.56s/it] 93% 139/150 [2:04:03<09:49, 53.56s/it] 93% 140/150 [2:04:57<08:55, 53.56s/it] 94% 141/150 [2:05:50<08:02, 53.56s/it] 95% 142/150 [2:06:44<07:08, 53.56s/it] 95% 143/150 [2:07:37<06:14, 53.57s/it] 96% 144/150 [2:08:31<05:21, 53.57s/it] 97% 145/150 [2:09:24<04:27, 53.57s/it] 97% 146/150 [2:10:18<03:34, 53.57s/it] 98% 147/150 [2:11:12<02:40, 53.56s/it] 99% 148/150 [2:12:05<01:47, 53.56s/it] 99% 149/150 [2:12:59<00:53, 53.56s/it]100% 150/150 [2:13:52<00:00, 53.56s/it]IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (1352, 1014) to (1360, 1024) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).
[swscaler @ 0x5842d80] Warning: data is not aligned! This can lead to a speed loss
IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (1352, 1014) to (1360, 1024) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).
[swscaler @ 0x6ebe8c0] Warning: data is not aligned! This can lead to a speed loss
121.14980558181514 (1014, 1352, 3)
121.20459134250669 (1014, 1352, 3)
121.23141964178036 (1014, 1352, 3)
121.24970020307413 (1014, 1352, 3)
121.2428099798093 (1014, 1352, 3)
121.25267410104688 (1014, 1352, 3)
121.26691871005139 (1014, 1352, 3)
121.26771354877864 (1014, 1352, 3)
121.27774422386393 (1014, 1352, 3)
121.27388917093629 (1014, 1352, 3)
121.28888096238461 (1014, 1352, 3)
121.28194356912495 (1014, 1352, 3)
121.29860770709087 (1014, 1352, 3)
121.2965147209287 (1014, 1352, 3)
121.31322797404385 (1014, 1352, 3)
121.31230791600045 (1014, 1352, 3)
121.32416679310171 (1014, 1352, 3)
121.32677597461962 (1014, 1352, 3)
121.33168676011188 (1014, 1352, 3)
121.32996505530075 (1014, 1352, 3)
121.32317865465339 (1014, 1352, 3)
121.33079660881778 (1014, 1352, 3)
121.3303008375835 (1014, 1352, 3)
121.33981750561178 (1014, 1352, 3)
121.33203688790853 (1014, 1352, 3)
121.34080807550312 (1014, 1352, 3)
121.33497625939023 (1014, 1352, 3)
121.34847319966232 (1014, 1352, 3)
121.35831519476831 (1014, 1352, 3)
121.37078485035927 (1014, 1352, 3)
121.36988424386011 (1014, 1352, 3)
121.36130197938914 (1014, 1352, 3)
121.36276449237305 (1014, 1352, 3)
121.35619862360873 (1014, 1352, 3)
121.36585680162148 (1014, 1352, 3)
121.36025378429794 (1014, 1352, 3)
121.3719482958502 (1014, 1352, 3)
121.35866459313205 (1014, 1352, 3)
121.36108752611369 (1014, 1352, 3)
121.35670533633665 (1014, 1352, 3)
121.3632957626756 (1014, 1352, 3)
121.36225413248057 (1014, 1352, 3)
121.35992019031391 (1014, 1352, 3)
121.36576075962171 (1014, 1352, 3)
121.36210338301258 (1014, 1352, 3)
121.37095699652595 (1014, 1352, 3)
121.36248098611549 (1014, 1352, 3)
121.36701052134029 (1014, 1352, 3)
121.34958436912807 (1014, 1352, 3)
121.35424033939054 (1014, 1352, 3)
121.34787190380044 (1014, 1352, 3)
121.36058227225159 (1014, 1352, 3)
121.35818900287494 (1014, 1352, 3)
121.35795120774638 (1014, 1352, 3)
121.35472346712106 (1014, 1352, 3)
121.35052193356131 (1014, 1352, 3)
121.35865632622574 (1014, 1352, 3)
121.35648650646375 (1014, 1352, 3)
121.36943491318776 (1014, 1352, 3)
121.35727356457329 (1014, 1352, 3)
121.36176711444122 (1014, 1352, 3)
121.34901905862307 (1014, 1352, 3)
121.35610306789756 (1014, 1352, 3)
121.35312795420329 (1014, 1352, 3)
121.35762733953449 (1014, 1352, 3)
121.35738492466417 (1014, 1352, 3)
121.35648918105109 (1014, 1352, 3)
121.36247952724966 (1014, 1352, 3)
121.35607851032293 (1014, 1352, 3)
121.3661288800968 (1014, 1352, 3)
121.35676004380488 (1014, 1352, 3)
121.36617556380301 (1014, 1352, 3)
121.35900669716669 (1014, 1352, 3)
121.37230280024431 (1014, 1352, 3)
121.37131174406436 (1014, 1352, 3)
121.37917114052185 (1014, 1352, 3)
121.37586899773973 (1014, 1352, 3)
121.37455674793522 (1014, 1352, 3)
121.37811856883317 (1014, 1352, 3)
121.3753622850118 (1014, 1352, 3)
121.38803982898202 (1014, 1352, 3)
121.38332088434501 (1014, 1352, 3)
121.3931696874915 (1014, 1352, 3)
121.37968636330038 (1014, 1352, 3)
121.38854167882388 (1014, 1352, 3)
121.38343637788904 (1014, 1352, 3)
121.3924244502021 (1014, 1352, 3)
121.39231673727578 (1014, 1352, 3)
121.39640399301301 (1014, 1352, 3)
121.3974594824333 (1014, 1352, 3)
121.39168115806714 (1014, 1352, 3)
121.39799561562192 (1014, 1352, 3)
121.39132738310595 (1014, 1352, 3)
121.40073609506359 (1014, 1352, 3)
121.39489285116845 (1014, 1352, 3)
121.40779311532043 (1014, 1352, 3)
121.40409002758228 (1014, 1352, 3)
121.41179916086038 (1014, 1352, 3)
121.40988269746235 (1014, 1352, 3)
121.41260421164836 (1014, 1352, 3)
121.41885788312734 (1014, 1352, 3)
121.4240626300822 (1014, 1352, 3)
121.43993776478415 (1014, 1352, 3)
121.44197920435403 (1014, 1352, 3)
121.45349913829659 (1014, 1352, 3)
121.44463166555794 (1014, 1352, 3)
121.4482547588203 (1014, 1352, 3)
121.43997739730557 (1014, 1352, 3)
121.44601539978758 (1014, 1352, 3)
121.44786815937817 (1014, 1352, 3)
121.4521433656618 (1014, 1352, 3)
121.45733352395847 (1014, 1352, 3)
121.45344054051951 (1014, 1352, 3)
121.45766322763365 (1014, 1352, 3)
121.44967861186 (1014, 1352, 3)
121.46096755871449 (1014, 1352, 3)
121.45805371738463 (1014, 1352, 3)
121.46850965185627 (1014, 1352, 3)
121.45897620687106 (1014, 1352, 3)
121.46213756910161 (1014, 1352, 3)
121.45567503666616 (1014, 1352, 3)
121.45169743900968 (1014, 1352, 3)
121.45032197168634 (1014, 1352, 3)
121.45018824231956 (1014, 1352, 3)
121.45920622138192 (1014, 1352, 3)
121.45387528253369 (1014, 1352, 3)
121.46280402763675 (1014, 1352, 3)
121.45655789363117 (1014, 1352, 3)
121.46336860870885 (1014, 1352, 3)
121.45627463051791 (1014, 1352, 3)
121.46319427424343 (1014, 1352, 3)
121.4642021073803 (1014, 1352, 3)
121.47046210061117 (1014, 1352, 3)
121.47203864827328 (1014, 1352, 3)
121.46557635898213 (1014, 1352, 3)
121.46205879034737 (1014, 1352, 3)
121.45155860361254 (1014, 1352, 3)
121.46030693564262 (1014, 1352, 3)
121.45592596158708 (1014, 1352, 3)
121.46989022520998 (1014, 1352, 3)
121.46242715396676 (1014, 1352, 3)
121.46649058156227 (1014, 1352, 3)
121.4517436364273 (1014, 1352, 3)
121.44991737956576 (1014, 1352, 3)
121.44799240611712 (1014, 1352, 3)
121.44615496461765 (1014, 1352, 3)
121.45265688643022 (1014, 1352, 3)
121.44816041883065 (1014, 1352, 3)
121.45728173422188 (1014, 1352, 3)
121.44233152044941 (1014, 1352, 3)
==> Finished Test.
100% 150/150 [2:13:55<00:00, 53.57s/it]==> Saving mesh to trial_dynerf_5s/meshes/ngp_200.ply

Traceback (most recent call last):
  File "main_dynerf.py", line 117, in <module>
    trainer.save_mesh(resolution=256, threshold=10)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 446, in save_mesh
    vertices, triangles = extract_geometry(self.model.aabb_infer[:3], self.model.aabb_infer[3:], resolution=resolution, threshold=threshold, query_func=query_func)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 149, in extract_geometry
    u = extract_fields(bound_min, bound_max, resolution, query_func)
  File "/home/zhangyan/3DReconstruction/ngp/dynerf/utils.py", line 142, in extract_fields
    val = query_func(pts, ts).reshape(len(xs), len(ys), len(zs)).detach().cpu().numpy() # [S, 1] --> [x, y, z]
TypeError: query_func() takes 1 positional argument but 2 were given
